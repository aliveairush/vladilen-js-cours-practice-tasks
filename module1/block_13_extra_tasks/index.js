// "this" keyword. Extra task #1  üö©
(function task1() {
  const attacker = {
    archer: 30,
    footSoldier: 55,
    cavalry: 10,
    artillery: 3,

    checkChancesToWin(defenderObject) {
      let chanceToWin = 0;
      let maximumChances = 0;

      Object.keys(this).forEach(key => {
        if (typeof this[key] === "function") return; // –ù–µ—Ç —Å–º—ã—Å–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —ç—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è

        if (this[key] > defenderObject[key]) { // –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –±–æ–ª—å—à–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤—Ä–∞–∂–µ—Å–∫–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
          chanceToWin++;
        }
        maximumChances++;
      });

      return [chanceToWin, maximumChances];
    },

    improveArmy() {
      Object.keys(this).forEach(key => {
        if (typeof this[key] === "function") return; // –ù–µ—Ç —Å–º—ã—Å–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —ç—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è
        this[key] += 5;
      });
    },

    attack(defender) {
      const [ourArmyChances, maximumChances] = this.checkChancesToWin(defender);
      if (ourArmyChances / maximumChances < 0.7) {
        this.improveArmy();
        console.log(`–ù–∞—à–∏ —à–∞–Ω—Å—ã —Ä–∞–≤–Ω—ã ${ourArmyChances}/${maximumChances}. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫—Ä–µ–ø–ª–µ–Ω–∏–µ!`)
      }
      else {
        console.log("–ú—ã —É—Å–∏–ª–∏–ª–∏—Å—å! –ú—ã –Ω–µ—Å–æ–º–Ω–µ–Ω–Ω–æ –ø–æ–±–µ–¥–∏–º! –ù–∞—à–∏ —à–∞–Ω—Å—ã –≤—ã—Å–æ–∫–∏!");
      }
    }
  }

  const defender = {
    archer: 33,
    footSoldier: 50,
    cavalry: 40,
    artillery: 10,
  }

  console.group("TASK 1")
  attacker.attack(defender); // –ù–∞—à–∏ —à–∞–Ω—Å—ã —Ä–∞–≤–Ω—ã 1/4. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫—Ä–µ–ø–ª–µ–Ω–∏–µ!
  attacker.attack(defender); // –ù–∞—à–∏ —à–∞–Ω—Å—ã —Ä–∞–≤–Ω—ã 2/4. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫—Ä–µ–ø–ª–µ–Ω–∏–µ!
  attacker.attack(defender); // –ú—ã —É—Å–∏–ª–∏–ª–∏—Å—å! –ú—ã –Ω–µ—Å–æ–º–Ω–µ–Ω–Ω–æ –ø–æ–±–µ–¥–∏–º! –ù–∞—à–∏ —à–∞–Ω—Å—ã –≤—ã—Å–æ–∫–∏!
  console.groupEnd();
}());


//  OOP. Extra task #1  üö©
(function task1OOP() {
  class Dictionary {
    #name;
    #words;

    constructor(name) {
      this.#name = name;
      this.#words = {};
    }

    get mainName() {
      return this.#name;
    }

    set setMainName(name) {
      this.#name = name;
      return this;
    }

    get allWords() {
      return this.#words
    }

    #addNewWord(wordKey, wordObj) {
      this.#words[wordKey] = wordObj;
      return this;
    }

    add(word, description) {
      const wordInDictionary = this.#words[word];
      if (wordInDictionary === undefined) {
        this.#addNewWord(word, {
          word: word,
          description: description
        });
      }
      return this;
    }

    remove(word) {
      delete this.#words[word];
      return this;
    }

    get(word) {
      return this.#words[word];
    }

    showAllWords() {
      Object.values(this.#words)
        .forEach(entry => console.log(`${entry.word} - ${entry.description}`));
      return this;
    }
  }


  class HardWordsDictionary extends Dictionary {
    constructor(name) {
      super(name);
    }

    add(word, description) {
      super.add(word, description);
      this.allWords[word].isDifficult = true;
      return this;
    }
  }

  console.group("TASK 2")
  const hardWordsDictionary = new HardWordsDictionary('–°–ª–æ–∂–Ω—ã–µ —Å–ª–æ–≤–∞');

  hardWordsDictionary.add('–¥–∏–ª–µ—Ç–∞–Ω—Ç', '–¢–æ—Ç, –∫—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –Ω–∞—É–∫–æ–π –∏–ª–∏ –∏—Å–∫—É—Å—Å—Ç–≤–æ–º –±–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏, –æ–±–ª–∞–¥–∞—è —Ç–æ–ª—å–∫–æ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω—ã–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏.');

  hardWordsDictionary.add('–Ω–µ–æ–ª–æ–≥–∏–∑–º', '–ù–æ–≤–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ, –∞ —Ç–∞–∫–∂–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ —Å–ª–æ–≤–∞.');

  hardWordsDictionary.add('–∫–≤–∞–Ω—Ç', '–ù–µ–¥–µ–ª–∏–º–∞—è —á–∞—Å—Ç—å –∫–∞–∫–æ–π-–ª–∏–±–æ –≤–µ–ª–∏—á–∏–Ω—ã –≤ —Ñ–∏–∑–∏–∫–µ.');

  hardWordsDictionary.remove('–Ω–µ–æ–ª–æ–≥–∏–∑–º');

  hardWordsDictionary.showAllWords();

  console.log(hardWordsDictionary.mainName); // –°–ª–æ–∂–Ω—ã–µ —Å–ª–æ–≤–∞
  hardWordsDictionary.setMainName = '–ù–æ–≤—ã–π –°–ª–æ–≤–∞—Ä—å';
  console.log(hardWordsDictionary.mainName); // –ù–æ–≤—ã–π –°–ª–æ–≤–∞—Ä—å
  console.log(hardWordsDictionary.allWords); // –≤—ã–≤–æ–¥–∏—Ç –æ–±—ä–µ–∫—Ç –≤ –∫–æ—Ç–æ—Ä–æ–º –µ—Å—Ç—å —Å–ª–æ–≤–∞ // –¥–∏–ª–µ—Ç–∞–Ω—Ç –∏ –∫–≤–∞–Ω—Ç
  console.groupEnd();
}());


// OOP. Extra task #2  üö©
(function task2OOP() {

  class CarService {
    static DefaultWorkingHours = {
      from: '9:00',
      till: '20:00',
    }

    constructor(name, workingHours = CarService.DefaultWorkingHours) {
       this.name = name;
       this.workingHours = workingHours;
    }

    repairCar(carName ) {
      if (carName === undefined){
        console.error("–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—à–∏–Ω—ã, —á—Ç–æ–±—ã –µ–µ –æ—Ç—Ä–µ–º–æ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å");
      }

      const serviceWorkFromHour = Number(this.workingHours.from.split(":")[0]);
      const serviceWorkTillHour = Number(this.workingHours.till.split(":")[0]);
      const currentHour = new Date().getHours();

      if (currentHour > serviceWorkFromHour && currentHour < serviceWorkTillHour){
        console.log(`–°–µ–π—á–∞—Å –æ—Ç—Ä–µ–º–æ–Ω—Ç–∏—Ä—É–µ–º –≤–∞—à—É –º–∞—à–∏–Ω—É ${carName}! –û–∂–∏–¥–∞–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞`)
      }
      else {
        console.log("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã —Å–µ–π—á–∞—Å –∑–∞–∫—Ä—ã—Ç—ã. –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞");
      }
    }
  }

  console.group("TASK 3");
  const carService = new CarService('RepairCarNow', { from: '3:00', till: '20:00' });
  carService.repairCar('BMW');

  const carService2 = new CarService('RepairCarNow');
  carService2.repairCar("Lada")
  console.groupEnd();

}());
