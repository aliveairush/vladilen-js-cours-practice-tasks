// #JS.9.1 üö©
(function task1() {
  // Initial task data
  const peopleWaiting = ['–ö—Ä–∏—Å—Ç–∏–Ω–∞', '–û–ª–µ–≥', '–ö–∏—Ä–∏–ª–ª', '–ú–∞—Ä–∏—è', '–°–≤–µ—Ç–ª–∞–Ω–∞', '–ê—Ä—Ç–µ–º', '–ì–ª–µ–±'];
  // –ö–∞–∫–æ–µ –¥—É–º–∞—é –æ–∂–∏–¥–∞–µ—Ç—Å—è —Ä–µ—à–µ–Ω–∏–µ. –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
  // –ü–æ –∑–∞–¥–∞–Ω–∏—é –Ω—É–∂–Ω–æ alert() —é–∑–∞—Ç—å, –Ω–æ –¥—É–º–∞—é –Ω–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ –µ—Å–ª–∏ –±—É–¥–µ—Ç console.log();
  const giveParcel = (personName, length) => {
    console.log(`${personName} –ø–æ–ª—É—á–∏–ª(–∞) –ø–æ—Å—ã–ª–∫—É. –í –æ—á–µ—Ä–µ–¥–∏ –æ—Å—Ç–∞–ª–æ—Å—å ${length} —á–µ–ª–æ–≤–µ–∫`);
  }
  const leaveQueueWithoutParcel = (personName) => {
    console.log(`${personName} –Ω–µ –ø–æ–ª—É—á–∏–ª(–∞) –ø–æ—Å—ã–ª–∫—É –∏ —É—à–µ–ª(–ª–∞) –∏–∑ –æ—á–µ—Ä–µ–¥–∏`);
  }

  peopleWaiting.reverse(); // –ú—ã —Å–æ–±–∏—Ä–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –Ω–∞—á–∞–ª–∞ –¥–æ –∫–æ–Ω—Ü–∞. –ß—Ç–æ–±—ã —É–¥–∞–ª–µ–Ω–∏–µ –±—ã–ª–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–º –ª—É—á—à–µ —É–¥–∞–ª—è—Ç—å —Å –∫–æ–Ω—Ü–∞
  // Step 1. Remove Kristina and Oleg
  giveParcel(peopleWaiting.pop(), peopleWaiting.length);
  giveParcel(peopleWaiting.pop(), peopleWaiting.length);
  // Step 2.
  giveParcel(peopleWaiting.pop());
  for (const personName of peopleWaiting) {
    leaveQueueWithoutParcel(personName);
  }

  // ‚ûï solution without removing items while iteration over array
  const peopleWaiting2 = ['–ö—Ä–∏—Å—Ç–∏–Ω–∞', '–û–ª–µ–≥', '–ö–∏—Ä–∏–ª–ª', '–ú–∞—Ä–∏—è', '–°–≤–µ—Ç–ª–∞–Ω–∞', '–ê—Ä—Ç–µ–º', '–ì–ª–µ–±'];

  const giveParcel2 = (personName, length) => {
    console.log(`${personName} –ø–æ–ª—É—á–∏–ª(–∞) –ø–æ—Å—ã–ª–∫—É. –í –æ—á–µ—Ä–µ–¥–∏ –æ—Å—Ç–∞–ª–æ—Å—å ${length} —á–µ–ª–æ–≤–µ–∫`);
  }
  const leaveQueueWithoutParcel2 = (personName) => {
    console.log(`${personName} –Ω–µ –ø–æ–ª—É—á–∏–ª(–∞) –ø–æ—Å—ã–ª–∫—É –∏ —É—à–µ–ª(–ª–∞) –∏–∑ –æ—á–µ—Ä–µ–¥–∏`);
  }
  peopleWaiting2.forEach((personName, index, array) => index < 3 ? giveParcel2(personName, array.length - index - 1) : leaveQueueWithoutParcel2(personName));
  peopleWaiting2.length = 0; // Clear all data
}());


// #JS.9.2 üö©
(function task2() {
  const getSumOfSequence = (number) => {
    const array = [];
    for (let i = 1; i <= number; i++) {
      array.push(i);
    }
    return array[0] + array[number - 1];

    // Another way to fill up with the data
    // const newArray = [...Array(number)].map((item, index) => index + 1);
  };

  console.log(getSumOfSequence(5));
  console.assert(getSumOfSequence(5) === 6);
}());


// #JS.9.3 üö©
(function task3() {
  // Initial task data
  const coffees = ['Latte', 'Cappuccino', 'Americano'];

  const coffeeName = prompt('–ü–æ–∏—Å–∫ –∫–æ—Ñ–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é:', 'lAtte').trim();
  const coffeeNameIndex = coffees.findIndex(coffee => coffee.toLowerCase() === coffeeName.toLowerCase());

  if (coffeeNameIndex !== -1) {
    alert(`–î–µ—Ä–∂–∏—Ç–µ –≤–∞—à –ª—é–±–∏–º—ã–π –∫–æ—Ñ–µ ${coffees[coffeeNameIndex]}. –û–Ω ${coffeeNameIndex + 1}-–π –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ –≤ –Ω–∞—à–µ–π –∫–æ—Ñ–µ–π–Ω–µ.`)
  }
  else {
    alert('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–∞–∫–æ–≥–æ –≤–∏–¥–∞ –∫–æ—Ñ–µ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏');
  }
}());


// #JS.9.4 üö©
(function task4() {
  // Initial task data
  const coffees = ['Latte', 'Cappuccino', 'Americano'];
  const prices = [1.5, 1, 2];

  const updatedPrices = prices.map(price => price + 0.5);
  coffees.forEach((coffee, index) => console.log(`–ö–æ—Ñ–µ ${coffee} —Å–µ–π—á–∞—Å —Å—Ç–æ–∏—Ç ${updatedPrices[index]} –µ–≤—Ä–æ`))
}());


// #JS.9.5 üö©
(function task5() {
  // Initial task data
  const clientsEstimations = [];

  const askClientToGiveEstimation = () => {
    const clientEstimation = Number(prompt("–ö–∞–∫ –≤—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç–µ –Ω–∞—à—É –∫–æ—Ñ–µ–π–Ω—é –æ—Ç 1 –¥–æ 10?", "1"));

    if (clientEstimation > 0 && clientEstimation < 10) {
      clientsEstimations.push(clientEstimation);
    }
  }

  for (let i = 0; i < 5; i++) {
    askClientToGiveEstimation();
  }

  let goodEstimations = clientsEstimations.filter(estimation => estimation > 5).length;
  let notGoodEstimations = clientsEstimations.length - goodEstimations;

  alert(`–í—Å–µ–≥–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫: ${goodEstimations}; –í—Å–µ–≥–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫: ${notGoodEstimations}`)
}());


// #JS.9.6 üö©
(function task6(numbers) {
  // fori way
  let res = 0;
  for (let i = 0; i < numbers.length; i++) {
    res += numbers[i] ** 3;
  }
  console.log(`fori result = ${res}`);

  // for of
  res = 0;
  for (const number of numbers) {
    res += number ** 3;
  }
  console.log(`for of result = ${res}`);

  // forEach
  res = 0;
  numbers.forEach(number => res += number ** 3);
  console.log(`ForEach result = ${res}`);

  // reduce
  res = numbers.reduce((sum, number) => sum + number ** 3, 0);
  console.log(`Reduce result = ${res}`);
}([10, 4, 100, -5, 54, 2]));





