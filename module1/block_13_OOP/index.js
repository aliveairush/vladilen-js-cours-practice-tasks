// OOP. task #1  üö©
(function task1() {

  class Student {
    constructor(name, age) {
      this.name = name;
      this.age = age;
      this.technologies = [];
      this.status = 'Junior'
    }

    setTechnologies(technologies) {
      this.technologies = [
        ...this.technologies,
        ...technologies,
      ];
    }

    setNewStatus(newStatus) {
      this.status = newStatus;
    }
  }

  console.group("TASK 1")
  const student = new Student('Maxim', 20);
  student.setTechnologies(['HTML', 'CSS', 'JavaScript']);
  student.setNewStatus('Middle');
  console.log(student);

  console.groupEnd();
}());


// OOP. task #2  üö©
(function task2() {

  class Person {
    constructor(name, age) {
      this.name = name;
      this.age = age;
    }

    compareAge(anotherPerson) {
      if (this.age >= anotherPerson.age) {
        console.log(`${this.name} —Å—Ç–∞—Ä—à–µ, —á–µ–º ${anotherPerson.name}`);
      }
      else {
        console.log(`${this.name} –º–ª–∞–¥—à–µ, —á–µ–º ${anotherPerson.name}`)
      }
    }
  }

  const person1 = new Person('–ú–∞–∫—Å–∏–º', 24);
  const person2 = new Person('–°–≤–µ—Ç–ª–∞–Ω–∞', 36);
  const person3 = new Person('–ò—Ä–∏–Ω–∞', 23);

  console.group("TASK 2");
  person1.compareAge(person2); // –ú–∞–∫—Å–∏–º –º–ª–∞–¥—à–µ, —á–µ–º –°–≤–µ—Ç–ª–∞–Ω–∞
  person2.compareAge(person3); // –°–≤–µ—Ç–ª–∞–Ω–∞ —Å—Ç–∞—Ä—à–µ, —á–µ–º –ò—Ä–∏–Ω–∞
  person3.compareAge(person1); // –ò—Ä–∏–Ω–∞ –º–ª–∞–¥—à–µ, —á–µ–º –ú–∞–∫—Å–∏–º
  console.groupEnd();
}());


// OOP. task #3  üö©
(function task3() {
  class Dictionary {
    constructor(name) {
      this.name = name;
      this.words = {};
    }

    add(word, description) {
      const wordInDictionary = this.words[word];
      if (wordInDictionary === undefined) {
        this.words[word] = {
          word: word,
          description: description
        };
      }
      return this;
    }

    remove(word) {
      delete this.words[word];
      return this;
    }

    get(word) {
      return this.words[word];
    }

    showAllWords() {
      Object.values(this.words)
        .forEach(entry => console.log(`${entry.word} - ${entry.description}`));
      return this;
    }
  }

  console.group("TASK 3");
  const dictionary = new Dictionary('–¢–æ–ª–∫–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å')
    .add('JavaScript', '–ø–æ–ø—É–ª—è—Ä–Ω—ã–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è')
    .add('HTML', 'HyperText Markup Language')
    .add('CSS', 'Cascading Style Sheets')
    .add('–í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫', '–ß–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã –∏ —Å–∞–π—Ç—ã –∏–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∏ –¥–æ–ø–æ–ª–Ω—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ')
    .remove('JavaScript')
    .showAllWords();
  console.groupEnd();
}());


// OOP. task #4  üö©
(function task4() {
  // Same code from task 3
  class Dictionary {
    constructor(name) {
      this.name = name;
      this.words = {};
    }

    add(word, description) {
      const wordInDictionary = this.words[word];
      if (wordInDictionary === undefined) {
        this.words[word] = {
          word: word,
          description: description
        };
      }
      return this;
    }

    remove(word) {
      delete this.words[word];
      return this;
    }

    get(word) {
      return this.words[word];
    }

    showAllWords() {
      Object.values(this.words)
        .forEach(entry => console.log(`${entry.word} - ${entry.description}`));
      return this;
    }
  }

  // New code task 4
  class HardWordsDictionary extends Dictionary {
    constructor(name) {
      super(name);
    }

    add(word, description) {
      super.add(word, description);
      this.words[word].isDifficult = true;
      return this;
    }
  }

  console.group("TASK 4");
  const hardWordsDictionary = new HardWordsDictionary('–°–ª–æ–∂–Ω—ã–µ —Å–ª–æ–≤–∞')
    .add('–¥–∏–ª–µ—Ç–∞–Ω—Ç', '–¢–æ—Ç, –∫—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –Ω–∞—É–∫–æ–π –∏–ª–∏ –∏—Å–∫—É—Å—Å—Ç–≤–æ–º –±–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏, –æ–±–ª–∞–¥–∞—è —Ç–æ–ª—å–∫–æ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω—ã–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏.')
    .add('–∫–≤–∞–Ω—Ç', '–ù–µ–¥–µ–ª–∏–º–∞—è —á–∞—Å—Ç—å –∫–∞–∫–æ–π-–ª–∏–±–æ –≤–µ–ª–∏—á–∏–Ω—ã –≤ —Ñ–∏–∑–∏–∫–µ.')
    .remove('–Ω–µ–æ–ª–æ–≥–∏–∑–º')
    .showAllWords();

  console.log(hardWordsDictionary);
  console.groupEnd();
}());


// OOP. task #5  üö©
(function task4() {

  class Developer {
    constructor(fullName, age, position) {
      this.fullName = fullName;
      this.age = age;
      this.position = position;
      this.technologies = [];
    }

    code() {}

    learnNewTechnology(technology) {
      this.technologies.push(technology);
    }
  }

  class JuniorDeveloper extends Developer {
    constructor(fullName, age) {
      super(fullName, age, 'Junior');
      this.technologies = ['HTML', 'CSS', 'JavaScript'];
    }

    code() {
      super.code();
      console.log('Junior —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∏—à–µ—Ç –∫–æ–¥...');
    }
  }

  class MiddleDeveloper extends Developer {
    constructor(fullName, age) {
      super(fullName, age, 'Middle');
      this.technologies = ['HTML', 'CSS', 'JavaScript', 'React'];
    }

    code() {
      super.code();
      console.log('Middle —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∏—à–µ—Ç –∫–æ–¥...');
    }
  }

  class SeniorDeveloper extends Developer {
    constructor(fullName, age) {
      super(fullName, age, 'Senior');
      this.technologies = ['HTML', 'CSS', 'JavaScript', 'React', 'NodeJS'];
    }

    code() {
      super.code();
      console.log('Senior —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∏—à–µ—Ç –∫–æ–¥...');
    }
  }

  console.group("TASK 5")
  const juniorDeveloper = new JuniorDeveloper('–ê–Ω–∞—Å—Ç–∞—Å–∏—è', 20)
  const middleDeveloper = new MiddleDeveloper('–ò–≥–æ—Ä—å', 25)
  const seniorDeveloper = new SeniorDeveloper('–ú–∞–∫—Å–∏–º', 30)

  juniorDeveloper.code(); // Junior —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∏—à–µ—Ç –∫–æ–¥...
  middleDeveloper.code(); // Middle —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∏—à–µ—Ç –∫–æ–¥‚Ä¶
  seniorDeveloper.code(); // Senior —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∏—à–µ—Ç –∫–æ–¥...

  console.log(juniorDeveloper.fullName, juniorDeveloper.age,
    juniorDeveloper.position); // '–ê–Ω–∞—Å—Ç–∞—Å–∏—è', 20, 'Junior'
  console.log(middleDeveloper.fullName, middleDeveloper.age,
    middleDeveloper.position); // '–ò–≥–æ—Ä—å', 25, 'Middle'
  console.log(seniorDeveloper.fullName, seniorDeveloper.age,
    seniorDeveloper.position); // '–ú–∞–∫—Å–∏–º', 30, 'Senior'

  console.groupEnd();
}());